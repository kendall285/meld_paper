if (!requireNamespace("bigrquery", quietly = TRUE)) install.packages("bigrquery")
if (!requireNamespace("cowplot", quietly = TRUE)) install.packages("cowplot")
if (!requireNamespace("gtsummary", quietly = TRUE)) install.packages("gtsummary")
if (!requireNamespace("lubridate", quietly = TRUE)) install.packages("lubridate")
if (!requireNamespace("magick", quietly = TRUE)) install.packages("magick")
if (!requireNamespace("pROC", quietly = TRUE)) install.packages("pROC")
if(!requireNamespace("ResourceSelection", quietly = TRUE)) install.packages("ResourceSelection")
library(bigrquery)
library(cowplot)
library(dplyr)
library(ggplot2)
library(gtsummary)
library(lubridate)
library(magick)
library(pROC)
library(ResourceSelection)
library(tidyr)
library(readr)
gcp_project_id <- "<provide your Google Cloud project ID here>"
gcp_project_id <- "1033709072925"
############# MIMIC-IV QUERIES #############
# All admissions in MIMIC-IV (with ethnicity, mortality flag, admission and discharge times)
all_admissions_query <- "
SELECT
a.race AS ethnicity,
a.hospital_expire_flag,
a.admittime,
a.dischtime
FROM `physionet-data.mimiciv_3_1_hosp.admissions` AS a
;"
# Admissions of interest: cirrhosis cases identified via ICD-9/10 codes
# Joins admissions, diagnoses, and patient demographics
admissions_of_interest_query <- "
SELECT
a.hadm_id,
p.subject_id,
p.anchor_age,
p.gender,
a.race AS ethnicity,
d.icd_code,
d.icd_version,
a.hospital_expire_flag,
a.admittime,
a.dischtime
FROM `physionet-data.mimiciv_3_1_hosp.diagnoses_icd` AS d
JOIN `physionet-data.mimiciv_3_1_hosp.admissions`   AS a
ON d.hadm_id = a.hadm_id
JOIN `physionet-data.mimiciv_3_1_hosp.patients`     AS p
ON d.subject_id = p.subject_id
WHERE
(d.icd_version = 10 AND d.icd_code IN ('K743','K745','K7031','K7469','K7030','K7460','K717','K744'))
OR
(d.icd_version = 9  AND d.icd_code IN ('5716','5715','5712'))
;"
# Lab results relevant for MELD score calculation
# Extracts Bilirubin, Creatinine, Sodium, INR, and Albumin with valid numeric values
labs_query <- "
SELECT
le.hadm_id,
le.charttime,
dl.label,
le.valuenum
FROM `physionet-data.mimiciv_3_1_hosp.labevents`  AS le
JOIN `physionet-data.mimiciv_3_1_hosp.d_labitems` AS dl
ON le.itemid = dl.itemid
WHERE
le.hadm_id IS NOT NULL
AND le.valuenum IS NOT NULL
AND le.valuenum > 0
AND (
dl.label = 'Bilirubin, Total'
OR dl.label = 'Creatinine'
OR dl.label = 'Sodium'
OR LOWER(dl.label) LIKE '%inr%'
OR dl.label = 'Albumin'
)
;"
# Admissions where patients received liver transplants
# ICD-10 code: 0FY00Zx series; ICD-9 code: 505%
liver_transplants_query <- "
SELECT
*
FROM `physionet-data.mimiciv_3_1_hosp.procedures_icd`
WHERE
(icd_version = 10 AND icd_code LIKE '0FY00Z%')
OR
(icd_version = 9  AND icd_code LIKE '505%')
;"
# Admissions where patients received dialysis / renal replacement therapy
# ICD-9 codes: 3995, 5498; ICD-10 codes: 5A1D%
dialysis_query <- "
SELECT
*
FROM `physionet-data.mimiciv_3_1_hosp.procedures_icd`
WHERE
(icd_version = 9  AND (icd_code LIKE '3995%' OR icd_code LIKE '5498%'))
OR
(icd_version = 10 AND icd_code LIKE '5A1D%')
;"
# Create parent directory for a file path, if missing.
.ensure_parent_dir <- function(path) {
dir <- dirname(path)
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE, showWarnings = FALSE)
}
}
# Write CSV safely (no row names, UTF-8).
.write_csv_safe <- function(df, path) {
.ensure_parent_dir(path)
tryCatch(
{
utils::write.csv(df, file = path, row.names = FALSE, fileEncoding = "UTF-8")
invisible(TRUE)
},
error = function(e) stop("Error: failed to write CSV at '", path, "'. ", e$message)
)
}
# Run a BigQuery SQL string safely and return a data.frame (tibble).
.run_query_safe <- function(query,
project = gcp_project_id,
bigint = "integer64",
page_size = 1e5,
quiet = TRUE) {
if (missing(project) || is.null(project) || !nzchar(project)) {
stop("Error: gcp_project_id is not set. Please set gcp_project_id <- 'your-project-id'.")
}
job <- tryCatch(
bigrquery::bq_project_query(project, query, quiet = quiet),
error = function(e) stop("Error: failed to start BigQuery job. ", e$message)
)
tryCatch(
bigrquery::bq_table_download(job, bigint = bigint, page_size = page_size),
error = function(e) stop("Error: failed to download query results. ", e$message)
)
}
# Get all admissions (race→ethnicity, expire flag, admit/discharge times).
get_all_admissions_from_mimic_iv <- function() {
.run_query_safe(all_admissions_query)
}
# Get cirrhosis admissions (ICD-9/10) with demographics.
get_cirrhosis_admissions_from_mimic_iv <- function() {
.run_query_safe(admissions_of_interest_query)
}
# Get MELD-relevant labs (Bilirubin, Creatinine, Sodium, INR, Albumin).
# If you provide admissions_list, we call your updater hook before running the query.
get_labs_from_mimic_iv <- function(admissions_list = NULL) {
if (!is.null(admissions_list)) {
tryCatch(
update_selected_admissions_bq_table(admissions_list = admissions_list),
error = function(e) stop("Error: failed to update selected admissions table. ", e$message)
)
}
.run_query_safe(labs_query)
}
# Get liver transplant procedures.
get_liver_transplants_from_mimic_iv <- function() {
.run_query_safe(liver_transplants_query)
}
# Get dialysis / RRT procedures.
get_dialysis_from_mimic_iv <- function() {
.run_query_safe(dialysis_query)
}
save_all_admissions_csv <- function(path = "Data/mimic_admissions_all.csv") {
df <- get_all_admissions_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_cirrhosis_admissions_csv <- function(path = "Data/mimic_admissions_meld.csv") {
df <- get_cirrhosis_admissions_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_labs_csv <- function(path = "Data/mimic_labs.csv", admissions_list = NULL) {
df <- get_labs_from_mimic_iv(admissions_list = admissions_list)
.write_csv_safe(df, path)
df
}
save_liver_transplants_csv <- function(path = "Data/mimic_liver.csv") {
df <- get_liver_transplants_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_dialysis_csv <- function(path = "Data/mimic_dialysis.csv") {
df <- get_dialysis_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_all_mimic_extracts <- function(
admissions_all_path   = "Data/mimic_admissions_all.csv",
admissions_meld_path  = "Data/mimic_admissions_meld.csv",
labs_path             = "Data/mimic_labs.csv",
liver_tx_path         = "Data/mimic_liver.csv",
dialysis_path         = "Data/mimic_dialysis.csv",
admissions_list_for_labs = NULL  # optionally scope labs
) {
df_all   <- save_all_admissions_csv(admissions_all_path)
df_meld  <- save_cirrhosis_admissions_csv(admissions_meld_path)
df_labs  <- save_labs_csv(labs_path, admissions_list_for_labs)
df_tx    <- save_liver_transplants_csv(liver_tx_path)
df_dial  <- save_dialysis_csv(dialysis_path)
invisible(list(
admissions_all  = df_all,
admissions_meld = df_meld,
labs            = df_labs,
liver_tx        = df_tx,
dialysis        = df_dial
))
}
########################################################
###                MIMIC-IV DATA FETCH               ###
########################################################
# Run fetchers and write CSVs to disk
save_all_mimic_extracts()
gcp_project_id <- "1033709072925"
########################################################
###                MIMIC-IV DATA FETCH               ###
########################################################
# Run fetchers and write CSVs to disk
save_all_mimic_extracts()
# Run a BigQuery SQL string safely and return a data.frame (tibble).
.run_query_safe <- function(query,
project = gcp_project_id,
bigint = "integer64",
page_size = 1e5,
quiet = TRUE) {
# Only test the actual value
if (is.null(project) || !nzchar(project)) {
stop("Error: gcp_project_id is not set. Please set gcp_project_id <- 'your-project-id'.")
}
job <- tryCatch(
bigrquery::bq_project_query(project, query, quiet = quiet),
error = function(e) stop("Error: failed to start BigQuery job. ", e$message)
)
tryCatch(
bigrquery::bq_table_download(job, bigint = bigint, page_size = page_size),
error = function(e) stop("Error: failed to download query results. ", e$message)
)
}
# Get all admissions (race→ethnicity, expire flag, admit/discharge times).
get_all_admissions_from_mimic_iv <- function() {
.run_query_safe(all_admissions_query)
}
# Get cirrhosis admissions (ICD-9/10) with demographics.
get_cirrhosis_admissions_from_mimic_iv <- function() {
.run_query_safe(admissions_of_interest_query)
}
# Get MELD-relevant labs (Bilirubin, Creatinine, Sodium, INR, Albumin).
# If you provide admissions_list, we call your updater hook before running the query.
get_labs_from_mimic_iv <- function(admissions_list = NULL) {
if (!is.null(admissions_list)) {
tryCatch(
update_selected_admissions_bq_table(admissions_list = admissions_list),
error = function(e) stop("Error: failed to update selected admissions table. ", e$message)
)
}
.run_query_safe(labs_query)
}
# Get liver transplant procedures.
get_liver_transplants_from_mimic_iv <- function() {
.run_query_safe(liver_transplants_query)
}
# Get dialysis / RRT procedures.
get_dialysis_from_mimic_iv <- function() {
.run_query_safe(dialysis_query)
}
save_all_admissions_csv <- function(path = "Data/mimic_admissions_all.csv") {
df <- get_all_admissions_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_cirrhosis_admissions_csv <- function(path = "Data/mimic_admissions_meld.csv") {
df <- get_cirrhosis_admissions_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_labs_csv <- function(path = "Data/mimic_labs.csv", admissions_list = NULL) {
df <- get_labs_from_mimic_iv(admissions_list = admissions_list)
.write_csv_safe(df, path)
df
}
save_liver_transplants_csv <- function(path = "Data/mimic_liver.csv") {
df <- get_liver_transplants_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_dialysis_csv <- function(path = "Data/mimic_dialysis.csv") {
df <- get_dialysis_from_mimic_iv()
.write_csv_safe(df, path)
df
}
save_all_mimic_extracts <- function(
admissions_all_path   = "Data/mimic_admissions_all.csv",
admissions_meld_path  = "Data/mimic_admissions_meld.csv",
labs_path             = "Data/mimic_labs.csv",
liver_tx_path         = "Data/mimic_liver.csv",
dialysis_path         = "Data/mimic_dialysis.csv",
admissions_list_for_labs = NULL  # optionally scope labs
) {
df_all   <- save_all_admissions_csv(admissions_all_path)
df_meld  <- save_cirrhosis_admissions_csv(admissions_meld_path)
df_labs  <- save_labs_csv(labs_path, admissions_list_for_labs)
df_tx    <- save_liver_transplants_csv(liver_tx_path)
df_dial  <- save_dialysis_csv(dialysis_path)
invisible(list(
admissions_all  = df_all,
admissions_meld = df_meld,
labs            = df_labs,
liver_tx        = df_tx,
dialysis        = df_dial
))
}
########################################################
###                MIMIC-IV DATA FETCH               ###
########################################################
# Run fetchers and write CSVs to disk
save_all_mimic_extracts()
library(bigrquery)      # R package for BigQuery
library(bigrquery)
bq_auth()
bq_auth(email = TRUE, cache = FALSE)
options(gargle_quiet = FALSE)
bq_auth(email = TRUE, cache = FALSE)
options(gargle_verbosity = "debug")
bq_auth(email = TRUE, cache = FALSE)
options(gargle_oauth_email = TRUE)
bq_auth(email = TRUE, cache = FALSE)
gargle::cred_funs_set(
default          = gargle::credentials_user_oauth2,
app_default      = function(...) NULL,   # turn off ADC
service_account  = function(...) NULL,   # turn off SA
external_account = function(...) NULL    # turn off external
)
bq_auth(email = TRUE, cache = FALSE)
Sys.setenv(GOOGLE_APPLICATION_CREDENTIALS = "")  # blank disables ADC discovery for this session
bq_auth(email = TRUE, cache = FALSE)
gargle::cred_funs_set(
default          = gargle::credentials_user_oauth2,  # force user OAuth
app_default      = function(...) NULL,                # disable ADC
service_account  = function(...) NULL,                # disable SA
external_account = function(...) NULL,                # disable external
byo_oauth        = function(...) NULL                 # disable BYO (prevents that Token2.0 error path)
)
gargle::cred_funs_set(
credentials_user_oauth2      = gargle::credentials_user_oauth2,  # keep user OAuth
credentials_app_default      = function(...) NULL,                # disable ADC
credentials_service_account  = function(...) NULL,                # disable SA
credentials_external_account = function(...) NULL,                # disable external
credentials_byo_oauth        = function(...) NULL                 # disable BYO
)
options(gargle_oauth_email = TRUE)
bq_auth(email = TRUE, cache = FALSE)
library(gargle)
options(gargle_quiet = FALSE)
# 1) Make sure ADC is not considered
Sys.setenv(GOOGLE_APPLICATION_CREDENTIALS = "")  # blank path disables ADC discovery
# 1) Make sure ADC is not considered
Sys.setenv(GOOGLE_APPLICATION_CREDENTIALS = "")  # blank path disables ADC discovery
# 1) Make sure ADC is not considered
Sys.setenv(GOOGLE_APPLICATION_CREDENTIALS = "")  # blank path disables ADC discovery
# 2) Tell gargle to try ONLY user OAuth (no ADC/SA/external/BYO)
gargle::cred_funs_set(gargle::credentials_user_oauth2)
# 3) Force an account picker and avoid cache reuse
options(gargle_oauth_email = TRUE)
# 4) Trigger OAuth
bq_auth(email = TRUE, cache = FALSE)
